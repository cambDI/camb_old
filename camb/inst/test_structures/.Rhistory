setwd("~/Dropbox/projects/logP/8_error_estimation/Briesemeister_internal")
#library(smpredict)
library(png)
library(mclust)
library(multicore)
library(kernlab)
library(caret)
library(dsmR)
library(ggplot2)
library(gbm)
library(matie)
load("../../5_ensembles_all/data.rda")
#### Load the association weightings
as <- readRDS("../Calculate_A/medA.rda")
df <- read.csv("../../4_target_and_descriptors/target_and_descriptors_imputed.csv")
names(df)
names <- names(df)[3:ncol(df)]
as <- as[match(names(x.train), names)]
rm(names)
# find the CV errors of the greedy model
svmCVPredictions <- readRDS("../../5_ensembles_all/svm/svmCVPredictions.rda")
gbmCVPredictions <- readRDS("../../5_ensembles_all/gbm/gbmCVPredictions.rda")
load("../../5_ensembles_all/greedy.rda")
greedyPredictions <- svmCVPredictions$pred * 0.712 + gbmCVPredictions$pred * 0.288
obs <- svmCVPredictions$obs
RMSE(greedyPredictions, obs)
greedyCVErrors <- abs(greedyPredictions - obs)
folds <- list()
folds[[1]] <- which(svmCVPredictions$Resample == "Fold1.Rep1")
folds[[2]] <- which(svmCVPredictions$Resample == "Fold2.Rep1")
folds[[3]] <- which(svmCVPredictions$Resample == "Fold3.Rep1")
folds[[4]] <- which(svmCVPredictions$Resample == "Fold4.Rep1")
folds[[5]] <- which(svmCVPredictions$Resample == "Fold5.Rep1")
in <- 5
ref <- x.train[-folds[[1]], ]
out <- x.train[folds[[1]], ]
dim(ref)
dim(out)
dm <- matrix(NA, nrow=nrow(ref), ncol=nrow(out))
x <- as.matrix(ref)
for(i in 1:nrow(out)) {
y <- as.vector(out[i,], mode="numeric")
y[is.na(y)] <- 0
dm[,i] <- colSums((t(x)-y)^2)
}
dim(dm)
dms <- list()
dms[[1]] <- dm
dm[1:10, 1:10]
# from the original training folds calculate the distance matrixess
folds <- list()
folds[[1]] <- which(svmCVPredictions$Resample == "Fold1.Rep1")
folds[[2]] <- which(svmCVPredictions$Resample == "Fold2.Rep1")
folds[[3]] <- which(svmCVPredictions$Resample == "Fold3.Rep1")
folds[[4]] <- which(svmCVPredictions$Resample == "Fold4.Rep1")
folds[[5]] <- which(svmCVPredictions$Resample == "Fold5.Rep1")
#dms <- list()
for(fold in 2:5) {
ref <- x.train[-folds[[fold]], ]
out <- x.train[folds[[fold]], ]
dm <- matrix(NA, nrow=nrow(ref), ncol=nrow(out))
x <- as.matrix(ref)
for(i in 1:nrow(out)) {
y <- as.vector(out[i,], mode="numeric")
y[is.na(y)] <- 0
dm[,i] <- colSums((t(x)-y)^2)
}
dim(dm)
dms[[fold]] <- dm
}
saveRDS(dms, "dms.rds")
saveRDS(folds, file="folds.rds")
dim(dms[[1]])
errors <- list()
confine <- function(x, errors, N) {
1 - sum((errors[order(x)[1:N]])^2)/N
}
N <- 1
confine <- function(x, errors, N) {
1 - sum((errors[order(x)[1:N]])^2)/N
}
apply(dms[[1]][,1:10], 2, confine, greedyCVErrors[-folds[[1]]], N)
for(N in 1:20) {
confines <- apply(dms[[1]], 2, confine, greedyCVErrors[-folds[[1]]], N)
print(cor(greedyCVErrors[folds[[1]]], -confines))
}
plot(greedyCVErrors[folds[[1]]], -confines)
convive <- function(x, obs, N) {
1-var(obs[order(x)[1:N]])
}
convive <- function(x, obs, N) {
1-var(obs[order(x)[1:N]])
}
for(N in 1:20) {
convives <- apply(dm, 2, convive, obs[-folds[[1]]], N)
print(cor(greedyCVErrors[folds[[1]]], -convives))
}
N <- 2
convives <- apply(dm, 2, convive, obs[-folds[[1]]], N)
setwd("~/Dropbox/projects/logP/8_error_estimation/EE_internal")
setwd("~/Dropbox/projects/camb/camb/inst/test_structures")
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
Fingerprints(structures.file="structures_10.sdf", structure.number=2, output.file="output.png", use.name.as.title=TRUE)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
Fingerprints(structures.file="structures_10.sdf", structure.number=2, output.file="output.png", use.name.as.title=TRUE)
Fingerprints(structures.file="structures_10.sdf", structure.number=2, output.file="output.png", use.name.as.title=TRUE)
Fingerprints(structures.file="structures_10.sdf", structure.number=1, output.file="output.png", use.name.as.title=TRUE)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
Fingerprints(structures.file="structures_10.sdf", structure.number=1, output.file="output.png", use.name.as.title=TRUE)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
Fingerprints(structures.file="structures_10.sdf", structure.number=1, output.file="output.png", use.name.as.title=TRUE)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
Fingerprints(structures.file="structures_10.sdf", structure.number=1, output.file="output.png", use.name.as.title=TRUE)
