if (is.null(minn)) { minn <- min(errdf) - 0.20*diff((range(errdf)))}
if (is.null(maxx)) { maxx <- max(errdf) + 0.20*diff((range(errdf)))}
e. <- environment()#,globalenv())
print(errdf)
p <- ggplot(Data, aes_string(x=X, y=Y,fill=fill,colour=colour,shape=shape),environment=environment()) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(data=errdf,mapping=aes(ymin=low,ymax=high),environment=e.,
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
low <- Data[,Y] - Data[,err]
high <- Data[,Y] + Data[,err]
errdf <- data.frame(low,high)
err_rang <- range()
if (is.null(minn)) { minn <- min(errdf) - 0.20*diff((range(errdf)))}
if (is.null(maxx)) { maxx <- max(errdf) + 0.20*diff((range(errdf)))}
e. <- environment()#,globalenv())
print(errdf)
p <- ggplot(Data, aes_string(x=X, y=Y,fill=fill,colour=colour,shape=shape),environment=environment()) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(data=errdf,mapping=aes(ymin=low,ymax=high),environment=environment(),
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
low <- Data[,Y] - Data[,err]
high <- Data[,Y] + Data[,err]
errdf <- data.frame(low,high)
err_rang <- range()
if (is.null(minn)) { minn <- min(errdf) - 0.20*diff((range(errdf)))}
if (is.null(maxx)) { maxx <- max(errdf) + 0.20*diff((range(errdf)))}
e. <- environment()#,globalenv())
print(errdf)
p <- ggplot(Data, aes_string(x=X, y=Y,fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=aes_string(ymin=Y-err,ymax=Y+err),
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
low <- Data[,Y] - Data[,err]
high <- Data[,Y] + Data[,err]
errdf <- data.frame(low,high)
err_rang <- range()
if (is.null(minn)) { minn <- min(errdf) - 0.20*diff((range(errdf)))}
if (is.null(maxx)) { maxx <- max(errdf) + 0.20*diff((range(errdf)))}
e. <- environment()#,globalenv())
print(errdf)
p <- ggplot(Data, aes_string(x=X, y=Y,fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=aes(ymin=Y-err,ymax=Y+err),
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
low <- Data[,Y] - Data[,err]
high <- Data[,Y] + Data[,err]
errdf <- data.frame(low,high)
err_rang <- range()
if (is.null(minn)) { minn <- min(errdf) - 0.20*diff((range(errdf)))}
if (is.null(maxx)) { maxx <- max(errdf) + 0.20*diff((range(errdf)))}
e. <- environment()#,globalenv())
print(errdf)
p <- ggplot(Data, aes_string(x=X, y=Y,fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=aes_string(ymin='Y-err',ymax='Y+err'),
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
plotfn <- function(data, xind, yind, yerr) {
# subset the names now so it is slightly less typing later
yerr_names <- names(data)[c(yind,yerr)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(data, aes_string(x=names(data)[xind], y=names(data)[yind])) +
geom_point() +
geom_errorbar(mapping = yerrbar)
p
}
ErrorBarplot(exa2, X='gp',Y='cou',err='err')
plotfn(exa2,1,2,3)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(data)[c(yind,yerr)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(data)[xind], y=names(data)[yind],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2,1,2,3)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2,1,2,3)
err
Y
X
yerr
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol)
return(p)
}
ErrorBarplot(exa2,1,2,3)
ErrorBarplot(exa2,1,2,3,AngleLab=34)
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green")
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=23)
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.5,)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol,linewidth=5)
return(p)
}
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol,linewidth=55)
return(p)
}
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol,line.width=55)
return(p)
}
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol,size=55)
return(p)
}
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1)
ErrorBarplot <- function(Data,X,Y,err,colour=NULL,shape=NULL,fill=NULL,main="",ylab="",xlab="",
minn=NULL,maxx=NULL,TextSize=15,TitleSize=15,XAxisSize=15,YAxisSize=15,
TitleAxesSize=15,AngleLab=35,barcol="red",barSize=1,
barWidth=0.3, LegendName="Legend",ColLegend=1,
RowLegend=NULL,LegendPosition="right",
tmar=1,bmar=1,rmar=1,lmar=1,stat="identity"){
yerr_names <- names(Data)[c(Y,err)]
yerrbar <- aes_string(ymin = paste(yerr_names, collapse = '-'),
ymax = paste(yerr_names,collapse='+'))
p <- ggplot(Data, aes_string(x=names(Data)[X], y=names(Data)[Y],fill=fill,colour=colour,shape=shape)) + theme_bw() +
geom_bar(position="dodge",stat=stat)+
geom_errorbar(mapping=yerrbar,
position=position_dodge(0.9), width=barWidth,color=barcol,size=barSize)
return(p)
}
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1)
ErrorBarplot(exa2,1,2,3,AngleLab=34,barcol="green",barWidth=0.1,barSize=3)
modelCoxRF<- readRDS("rf_model_COX.rds")
dataset <- readRDS("dataset_COX_preprocessed.rda")
CVRMSE <- signif(min(as.vector(na.omit(modelCoxRF$results$RMSE))), digits=3)
holdout.predictions <- as.vector(predict(modelCoxRF, newdata = dataset$x.holdout))
install.packages("randomForest")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
holdout.predictions <- as.vector(predict(modelCoxRF, newdata = dataset$x.holdout))
names(dataset$x.holdout)
modelCoxSVMrad <- readRDS("COXsvm.rds")
setwd('/Users/icortes/Desktop/camb_final/camb/examples/COX')
modelCoxSVMrad <- readRDS("COXsvm.rds")
dataset <- readRDS("dataset_COX_preprocessed.rda")
list.files()
modelCoxRF<- readRDS("COXrf.rds")
modelCoxSVMrad <- readRDS("COXsvm.rds")
modelCoxSVMrad <- readRDS("COXsvm.rds")
modelCoxSVMrad <- readRDS("COXsvm.rds")
CVRMSE <- signif(min(as.vector(na.omit(modelCoxRF$results$RMSE))), digits=3)
holdout.predictions <- as.vector(predict(modelCoxRF, newdata = dataset$x.holdout))
holdout.predictions
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4)
##############
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black")
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor) +  geom_abline(slope=1,intercept=margin/2,colour=ColMargin) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="red")
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black")
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black") +ylim(c(min(pred),max(pred)))
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black") +ylim(c(min(holdout.predictions),max(holdout.predictions)))
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black") +ylim(c(min(holdout.predictions),max(holdout.predictions))) + xlim(c(min(holdout.predictions),max(holdout.predictions)))
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black") +ylim(c(min(holdout.predictions),max(holdout.predictions))) + xlim(c(min(c(holdout.predictions,dataset$y.holdout),max(holdout.predictions)))
)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black") +ylim(c(min(holdout.predictions),max(holdout.predictions))) + xlim(c(min(c(holdout.predictions,dataset$y.holdout)),max(holdout.predictions)))
##############
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black")
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor) +  geom_abline(slope=1,intercept=margin/2,colour=ColMargin) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black")
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black")
##############
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black",
PointShape=15)
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor,shape=PointShape) +  geom_abline(slope=1,intercept=margin/2,colour=ColMargin) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor,shape=PointShape) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black")
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',margin=1,PointColor="black",PointShape=16)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',
margin=1,PointColor="black",PointSize=3,PointShape=16)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=4,ColMargin='green',
margin=1,PointColor="black",PointSize=3,PointShape=16)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',
margin=1,PointColor="black",PointShape=16)
##
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black",
PointShape=16,MarginWidth=1)
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor,shape=PointShape) +  geom_abline(slope=1,intercept=margin/2,colour=ColMargin) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin,line.width=MarginWidth) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor,shape=PointShape) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=3)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=3,magin=1)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=3,margin=1)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=6,margin=1)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=8,margin=1)
###
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black",
PointShape=16,MarginWidth=1)
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor,shape=PointShape) +  geom_abline(slope=1,intercept=margin/2,colour=ColMargin) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin,linewidth=MarginWidth) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor,shape=PointShape) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=8,margin=1)
## Observed vs predicted
ObsPred <- function (pred,obs,margin=NULL,main="",ylab="Observed",xlab="Predicted",
PointSize=4,ColMargin="blue",TextSize=15,TitleSize=15,
XAxisSize=15,YAxisSize=15,TitleAxesSize=15,tmar=1,bmar=1,
rmar=1,lmar=1,AngleLab=30,LegendPosition="right",PointColor="black",
PointShape=16,MarginWidth=1)
{
if (isnot.vector(obs) || isnot.vector(pred)){
stop("The input data must be two vectors")
} else if ( length(obs) != length(pred) ){
stop("Both vectors have to be of equal length")
} else if(isnot.null(margin)) {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) +
geom_point(size=PointSize,colour=PointColor,shape=PointShape) +
geom_abline(slope=1,intercept=margin/2,colour=ColMargin,size=MarginWidth) +
geom_abline(slope=1,intercept=-(margin/2),colour=ColMargin,size=MarginWidth) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab)+
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
} else {
Data <- data.frame(Observed=obs,Predicted=pred)
p <- ggplot(Data, aes(x=Observed, y=Predicted)) + geom_point(size=PointSize,colour=PointColor,shape=PointShape) + theme_bw() +
ggtitle(main) + ylab(ylab) + xlab(xlab) +
ylim(c(min(c(obs,pred)), max(c(obs,pred)))) + xlim(c(min(c(obs,pred)), max(c(obs,pred)))) +
theme(text = element_text(size=TextSize),axis.text.x = element_text(size=XAxisSize,angle = AngleLab, hjust = 1),
axis.title.x=element_text(size=TitleAxesSize),axis.title.y=element_text(size=TitleAxesSize),
axis.text.y=element_text(size=YAxisSize),legend.position=LegendPosition,plot.title=element_text(size=TitleSize),
legend.key=element_blank(), plot.margin=unit(c(tmar,rmar,bmar,lmar),"cm"))
}
return(p)
}
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=8,margin=1)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',MarginWidth=2,margin=1)
ObsPred(pred=holdout.predictions,obs=dataset$y.holdout,PointSize=3,ColMargin='green',
margin=1,PointColor="black",PointShape=16,MarginWidth=2)
MetricsRf <- Validation(holdout.predictions,dataset$y.holdout)
MetricsRf
print MetricsRf
print(MetricsRf)
modelCoxRF$results
modelCoxRF$metric
RMSE_CV = min(svm_fit_R$results$RMSE, na.rm=TRUE,digits=3)
RMSE_CV = min(modelCoxRF$results$RMSE, na.rm=TRUE,digits=3)
Rsquared_CV = modelCoxRF$results$Rsquared[which( modelCoxRF$results$RMSE %in% min(modelCoxRF$results$RMSE, na.rm=TRUE))]
RMSE_CV
CVRMSE
