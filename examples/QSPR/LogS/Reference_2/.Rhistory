?train
library(caret)
?train
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
library(camb)
library(ggplot2)
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
StandardiseMolecules(structures.file="solubility_2007_ref2.sdf",
standardised.file="standardised.sdf",
removed.file="removed.sdf",
output = "properties.csv",
remove.inorganic=TRUE,
fluorine.limit=3,
chlorine.limit=3,
bromine.limit=3,
iodine.limit=3,
min.mass.limit=20,
max.mass.limit=900)
library(devtools)
setwd("~/Dropbox/projects/camb/roxygen")
document('../camb')
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
StandardiseMolecules(structures.file="solubility_2007_ref2.sdf",
standardised.file="standardised.sdf",
removed.file="removed.sdf",
output = "properties.csv",
remove.inorganic=TRUE,
fluorine.limit=3,
chlorine.limit=3,
bromine.limit=3,
iodine.limit=3,
min.mass.limit=20,
max.mass.limit=900)
StandardiseMolecules(structures.file="solubility_2007_ref2.sdf",
standardised.file="standardised.sdf",
removed.file="removed.sdf",
properties.file = "properties.csv",
remove.inorganic=TRUE,
fluorine.limit=3,
chlorine.limit=3,
bromine.limit=3,
iodine.limit=3,
min.mass.limit=20,
max.mass.limit=900)
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
descriptors <- RemoveStandardisedPrefix(descriptors)
properties <- read.csv("properties.csv")
properties <- properties[properties$Kept==1, ]
head(properties)
targets <- data.frame(Name = properties$Name, target = properties$EXPT)
ShowPropertiesSDF("standardised.sdf")
properties <- read.table("properties.txt", header=TRUE, sep="\t")
head(properties)
properties <- properties[properties$Kept==1, ]
properties
head(properties)
targets <- data.frame(Name = properties$Name, target = properties$EXPT)
dim(properties)
properties$Name
targets <- data.frame(Name = properties$NAME, target = properties$EXPT)
targets
head(properties)
p <- DensityResponse(targets$target) + xlab("LogS")
setwd("~/Dropbox/projects/camb/roxygen")
library(devtools)
document('../camb')
p <- DensityResponse(targets$target) + xlab("LogS")
p
p <- DensityResponse(targets$target) + xlab("LogS  Distribution")
p
p <- DensityResponse(targets$target) + xlab("LogS Target Distribution")
p
all <- merge(x=targets, y=descriptors, by="Name")
setwd("~/Dropbox/projects/camb/roxygen")
library(devtools)
document('../camb')
setwd("~/Dropbox/projects/camb/roxygen")
library(devtools)
document('../camb')
document('../camb')
setwd("~/Dropbox/projects/camb/roxygen")
library(devtools)
document('../camb')
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?StandardiseMolecules
document('../camb')
?StandardiseMolecules
?StandardiseMolecules
document('../camb')
?StandardiseMolecules
document('../camb')
?StandardiseMolecules
document('../camb')
document('../camb')
?StandardiseMolecules
library(camb)
setwd('~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2')
library(camb)
StandardiseMolecules(structures.file="solubility_2007_ref2.sdf",
standardised.file="standardised.sdf",
removed.file="removed.sdf",
properties.file = "properties.csv",
remove.inorganic=TRUE,
fluorine.limit=3,
chlorine.limit=3,
bromine.limit=3,
iodine.limit=3,
min.mass.limit=20,
max.mass.limit=900)
standardised_info <- read.table("standardisation_COX_info.csv",header=TRUE,sep="\t")
properties <- read.table("properties.csv", header=TRUE, sep="\t")
properties <- properties[properties$Kept==1, ]
head(properties)
dim(properties)
head(properties)
targets <- data.frame(Name = properties$NAME, target = properties$EXPT)
p <- DensityResponse(targets$target) + xlab("LogS Target Distribution")
p
ShowPropertiesSDF("standardised.sdf") # a mock .sdf file
ShowPropertiesSDF("test.sdf") # a mock .sdf file
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
descriptors <- RemoveStandardisedPrefix(descriptors)
saveRDS(descriptors, file="Padel_LogS.rds")
descriptors <- readRDS("Padel_LogS.rds")
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
library(camb)
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
descriptors <- GeneratePadelDescriptors(standardised.file = "standardised.sdf", types=c("2D"), threads = 1)
descriptors <- RemoveStandardisedPrefix(descriptors)
saveRDS(descriptors, file="descriptors.rds")
descriptors <- readRDS("descriptors.rds")
descriptors <- ReplaceInfinitesWithNA(descriptors)
class(descriptors)
ReplaceInfinitesWithNA
detach("package:camb", unload=TRUE)
library("camb", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ReplaceInfinitesWithNA
setwd("~/Dropbox/projects/camb/roxygen")
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
setwd("~/Dropbox/projects/camb/roxygen")
document('../camb')
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS/Reference_2")
ReplaceInfinitesWithNA
descriptors <- ReplaceInfinitesWithNA(descriptors)
descriptors <- ImputeFeatures(descriptors)
descriptors
ReplaceInfinitesWithNA
descriptors <- ReplaceInfinitesWithNA(descriptors)
which(is.infinite(descriptos))
which(is.infinite(descriptors))
which(is.infinite(as.matrix(descriptors)))
which(is.na(as.matrix(descriptors)))
ImputeFeatures
impute.knn(as.matrix(d))
impute.knn(as.matrix(descriptors))
summary(descriptors)
descriptors <- as.numeric(descriptors)
descriptors <- data.frame(as.numeric(as.matrix(descriptors)))
head(descriptors)
d <- descriptors[1:5, 1:5]
d <- descriptors[1:5,]
d <- descriptors[1:5,1:5]
descriptors <- readRDS("descriptors.rds")
d <- descriptors[1:5,1:5]
d
summary(d)
ImputeFeatures
d <- as.numeric(descriptors[1:5,1:5])
d <- descriptors[1:5,1:5]
d
summary(d)
d <- data.frame(as.numeric(as.matrix(d)))
summary(d)
d <- descriptors[1:5,1:5]
as.matrix(d)
as.numeric(as.matrix(d))
d <- descriptors[1:5,1:5]
summary(d)
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
d <- factorsNumeric(d)
d
summary(d)
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
all <- merge(x=targets, y=descriptors, by="Name")
head(all)
dim(all)
dim(targets)
dim(descriptors)
ids <- all$Name
x <- all[3:ncol(all)]
y <- all$target
x.finite <- ReplaceInfinitesWithNA(x)
x.imputed <- ImputeFeatures(x.finite)
summary(x.finite)
as.matrix(x.finite)
summary(as.matrix(x.finite))
ImputeFeatures <- function(d, k=10,...) {
suppressWarnings(require(impute)) || stop("Package impute is required. Install from CRAN or Bioconductor -depending on the R version you are using-.")
as.data.frame(impute.knn(factorsNumeric(as.matrix(d)), k = k,...)$data)
}
x.imputed <- ImputeFeatures(x.finite)
t <- x
t <- x[1:5, 1:5]
summary(t)
t <- factorsNumeric(x[1:5, 1:5])
summary(t)
x.finite <- ReplaceInfinitesWithNA(t)
t <- factorsNumeric(x[1:20, 1:20])
summary(t)
x.finite <- ReplaceInfinitesWithNA(t)
summary(x.finite)
x.finite <- ReplaceInfinitesWithNA(x)
t <- factorsNumeric(x[1:20, 1:20])
summary(t)
x.finite <- ReplaceInfinitesWithNA(t)
summary(x.finite)
ImputeFeatures(x.finite)
ImputeFeatures
as.data.frame(impute.knn(factorsNumeric(as.matrix(x.finite)), k = k,...)$data)
as.data.frame(impute.knn(factorsNumeric(as.matrix(x.finite)), k = k)$data)
as.data.frame(impute.knn(as.matrix(x.finite), k = k)$data)
as.data.frame(impute.knn(as.matrix(x.finite), k = 10)$data)
ImputeFeatures <- function(d, k=10,...) {
suppressWarnings(require(impute)) || stop("Package impute is required. Install from CRAN or Bioconductor -depending on the R version you are using-.")
as.data.frame(impute.knn(as.matrix(d), k = k, ...)$data)
}
ImputeFeatures(x.finite)
x.finite <- ReplaceInfinitesWithNA(x)
x.imputed <- ImputeFeatures(x.finite)
t <- factorsNumeric(x[1:200, 1:20])
summary(t)
x.finite <- ReplaceInfinitesWithNA(t)
summary(x.finite)
ImputeFeatures(x.finite)
t <- factorsNumeric(x[1:200, 1:200])
summary(t)
x.finite <- ReplaceInfinitesWithNA(t)
summary(x.finite)
ImputeFeatures(x.finite)
imp <- ImputeFeatures(x.finite)
x.imputed <- ImputeFeatures(x.finite)
x.finite <- ReplaceInfinitesWithNA(x)
x.imputed <- ImputeFeatures(x.finite)
summary(x.finite)
ImputeFeatures <- function(d, k=10,...) {
suppressWarnings(require(impute)) || stop("Package impute is required. Install from CRAN or Bioconductor -depending on the R version you are using-.")
as.data.frame(impute.knn(factorsNumeric(as.matrix(d)), k = k, ...)$data)
}
x.imputed <- ImputeFeatures(x.finite)
t <- as.matrix(x.finite)
factorsNumeric(t)
as.data.frame(impute.knn(as.matrix(factorsNumeric(x.finite)), k = k, ...)$data)
##############
ImputeFeatures <- function(d, k=10,...) {
suppressWarnings(require(impute)) || stop("Package impute is required. Install from CRAN or Bioconductor -depending on the R version you are using-.")
as.data.frame(impute.knn(as.matrix(factorsNumeric(d)), k = k, ...)$data)
}
x.imputed <- ImputeFeatures(x.finite)
<<echo=TRUE,results='hide',warning=FALSE,message=FALSE,eval=FALSE>>=
source("http://bioconductor.org/biocLite.R")
biocLite("doMC")
biocLite("png")
